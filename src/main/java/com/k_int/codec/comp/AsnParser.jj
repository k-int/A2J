/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AsnParser.jj */
/*@egen*//*
 *
 *  ASN.1 grammar  for JavaCC
 *
 *  Contributed by Helena Sarin (hsarin@lucent.com)
 *
 *  Derived in part from the following work: snacc - a freeware ASN.1 to C or C++ compiler, v 1.3,
 *  yacc/lex source code ( parse-asn1.y, lex-asn1.l), 
 *  the free software, which is covered by GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or later
 *
 *  I tested it against several ASN.1 files used by CMIP;
 *  Additional work is reguired to fully support SNMP MIBs parsing
 *   
 *  Please let me know if you use this grammar: i'm using it to develop ASN.1/IDL compiler
 *  
 * SANITY_CHECK=true;
 * DEBUG_PARSER=false;
 * DEBUG_TOKEN_MANAGER=false;
 *
 */

options {
STATIC=false;                                                  
}


PARSER_BEGIN(AsnParser)
//Title:       
//Version:     $Id: AsnParser.jj,v 1.1.1.1 2003/07/17 17:21:40 ianibbo Exp $
//Copyright:   Copyright (C) 1999,2000 Knowledge Integration Ltd (See the file LICENSE for details.)
//Author:      Ian Ibbotson
//Company:     Knowledge Integration Ltd
//Description: 
//

package com.k_int.codec.comp;

import java.util.*;
import java.io.File;
import java.io.FileInputStream;

public class AsnParser/*@bgen(jjtree)*/implements AsnParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTAsnParserState jjtree = new JJTAsnParserState();

/*@egen*/
  // public static void main(String args[]) throws ParseException {

  //   System.err.println("Args :"+args);

  //   for ( int i=0; i<args.length; i++ )
  //   {
  //     System.err.println("Processing asn source file : "+args[i]);

  //     File next_asn_file = new File(args[i]);

  //     if ( next_asn_file.exists() )       
  //     {
        // parser = new AsnParser(System.in);
  //       try 
  //       {
  //         AsnParser parser = new AsnParser(new FileInputStream(next_asn_file));
  //         parser.Input();	
  //         System.out.println("ASN.1 file parsed successfully... Calling pass1");
  //         parser.jjtree.rootNode().pass1();
  //         System.out.println("Calling outputJava");
          // parser.jjtree.rootNode().outputJava();
  //         CodecBuilderInfo.getInfo().create();
  //         System.out.println("Done outputting java");
  //       }
  //       catch(ParseException e)
  //       {
  //         System.out.println(e.toString());
  //         e.printStackTrace();
  //       }
  //       catch(java.io.FileNotFoundException fnfe)
  //       {
  //         System.out.println(fnfe.toString());
  //         fnfe.printStackTrace();
  //       }
  //     }
  //   }
  // }

  public static String usefulTypes[] = { 
        "GraphicString",  "NumericString", "PrintableString",
	"TeletexString", "T61String", "VideotexString", "IA5String",
	"VisibleString", "ISO646String", "GeneralizedTime", "UniversalString", "BMPString", "EXTERNAL" };

  public static String builtinTypes[] = {
        "Integer", "BitString", "SetOrSequenceType", "SetOrSequenceOfType", 
        "ChoiceType", "SelectionType", "TaggedType", "Any", "Enumerated",
        "OctetString", "OID", "REAL", "BOOL", "NULL" };
}

PARSER_END(AsnParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  "--" : WithinASNComment
}

<WithinASNComment> SPECIAL_TOKEN :
{
  <("--" | "\n" | "\r" | "\r\n" )> : DEFAULT
}

<WithinASNComment> MORE :
{
  <~[]>
}

TOKEN : 
{
 <OBJECT_IDENTIFIER_TKN: "OBJECT" ([" ","\n","\t","\r"])? "IDENTIFIER">
}

TOKEN : 
{
 <BSTRING_TKN: "\'" (["0"-"1"])* "\'B">
}

TOKEN : 
{
 <HSTRING_TKN: "\'" (["0"-"9","A"-"F","a"-"f"])* "\'H">
}

TOKEN : 
{
 <CSTRING_TKN: "\"" ( ~["\""] )* "\"" >
}

TOKEN : 
{
 <NUMBER_ERANGE_TKN: ["1"-"9"](["0"-"9"])*>
}

TOKEN : 
{
 <NUMBER_TKN: "0">
}

TOKEN :
{
  <DOT_TKN: ".">
| <COMMA_TKN: ",">
| <LEFTBRACE_TKN: "{">
| <RIGHTBRACE_TKN: "}">
| <LEFTPAREN_TKN: "(">
| <RIGHTPAREN_TKN: ")">
| <LEFTBRACKET_TKN: "[">
| <RIGHTBRACKET_TKN: "]">
| <LESSTHAN_TKN: "<">
| <MINUS_TKN: "-">
| <GETS_TKN: "::=">
| <BAR_TKN: "|">
| <SEMI_COLON_TKN: ";">
| <SELECTOR_TKN: ":">
| <TAGS_TKN: "TAGS">
| <BOOLEAN_TKN: "BOOLEAN">
| <INTEGER_TKN: "INTEGER">
| <BIT_TKN: "BIT">
| <STRING_TKN: "STRING">
| <OCTET_TKN: "OCTET">
| <NULL_TKN: "NULL">
| <SEQUENCE_TKN: "SEQUENCE">
| <OF_TKN: "OF">
| <SET_TKN: "SET">
| <IMPLICIT_TKN: "IMPLICIT">
| <CHOICE_TKN: "CHOICE">
| <ANY_TKN: "ANY">
| <OPTIONAL_TKN: "OPTIONAL">
| <DEFAULT_TKN: "DEFAULT">
| <COMPONENTS_TKN: "COMPONENTS">
| <UNIVERSAL_TKN: "UNIVERSAL">
| <APPLICATION_TKN: "APPLICATION">
| <PRIVATE_TKN: "PRIVATE">
| <TRUE_TKN: "TRUE">
| <FALSE_TKN: "FALSE">
| <BEGIN_TKN: "BEGIN">
| <END_TKN: "END">
| <DEFINITIONS_TKN: "DEFINITIONS">
| <EXPLICIT_TKN: "EXPLICIT">
| <ENUMERATED_TKN: "ENUMERATED">
| <EXPORTS_TKN: "EXPORTS">
| <IMPORTS_TKN: "IMPORTS">
| <REAL_TKN: "REAL">
| <INCLUDES_TKN: "INCLUDES">
| <MIN_TKN: "MIN">
| <MAX_TKN: "MAX">
| <SIZE_TKN: "SIZE">
| <FROM_TKN: "FROM">
| <WITH_TKN: "WITH">
| <COMPONENT_TKN: "COMPONENT">
| <PRESENT_TKN: "PRESENT">
| <ABSENT_TKN: "ABSENT">
| <DEFINED_TKN: "DEFINED">
| <BY_TKN: "BY">
| <PLUS_INFINITY_TKN: "PLUS-INFINITY">
| <MINUS_INFINITY_TKN: "MINUS-INFINITY">
| <OBJECTTYPE_TKN: "OBJECT-TYPE">
| <SYNTAX_TKN: "SYNTAX">
| <ACCESS_TKN: "ACCESS">
| <STATUS_TKN: "STATUS">
| <DESCRIPTION_TKN: "DESCRIPTION">
| <REFERENCE_TKN: "REFERENCE">
| <INDEX_TKN: "INDEX">
| <DEFVAL_TKN: "DEFVAL">
| <DHINT: "DISPLAY-HINT">
| <TC_TKN: "TEXTUAL-CONVENTION"> 
| <MACRO_TKN: "MACRO"> 
}

TOKEN : 
{
 <LCASEFIRST_IDENT_TKN: ["a"-"z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])*>
}


TOKEN : 
{
 <UCASEFIRST_IDENT_TKN: ["A"-"Z"](("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])*>
}

void Input() : {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Input */
 try {
/*@egen*/ 
 (ModuleDefinition())*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ModuleDefinition() : {/*@bgen(jjtree) ModuleDefinition */
                            ASTModuleDefinition jjtn000 = new ASTModuleDefinition(this, JJTMODULEDEFINITION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) ModuleDefinition */
  try {
/*@egen*/ 
  ModuleIdentifier() <DEFINITIONS_TKN> [TagDefault()] <GETS_TKN> <BEGIN_TKN> ModuleBody() <END_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void TagDefault() : {/*@bgen(jjtree) TagDefault */
  ASTTagDefault jjtn000 = new ASTTagDefault(this, JJTTAGDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TagDefault */
   try {
/*@egen*/ 	
   (<EXPLICIT_TKN> { jjtn000.which = 1; } |  <IMPLICIT_TKN> { jjtn000.which = 2; }) <TAGS_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ModuleIdentifier() : {/*@bgen(jjtree) ModuleIdentifier */
  ASTModuleIdentifier jjtn000 = new ASTModuleIdentifier(this, JJTMODULEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } 
{/*@bgen(jjtree) ModuleIdentifier */
   try {
/*@egen*/ 
   modulereference() [AssignedIdentifier()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AssignedIdentifier() : {/*@bgen(jjtree) AssignedIdentifier */
  ASTAssignedIdentifier jjtn000 = new ASTAssignedIdentifier(this, JJTASSIGNEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AssignedIdentifier */
   try {
/*@egen*/ 
   ObjectIdentifierValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ModuleBody() : {/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(this, JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ModuleBody */
  try {
/*@egen*/ 
  [Exports()] [Imports()] [AssignmentList()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Exports() : {/*@bgen(jjtree) Exports */
  ASTExports jjtn000 = new ASTExports(this, JJTEXPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Exports */
  try {
/*@egen*/ 
  <EXPORTS_TKN> [SymbolsExported()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SymbolsExported() : {/*@bgen(jjtree) SymbolsExported */
  ASTSymbolsExported jjtn000 = new ASTSymbolsExported(this, JJTSYMBOLSEXPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsExported */
   try {
/*@egen*/ 
   ExportSymbolList()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ExportSymbolList() : {/*@bgen(jjtree) ExportSymbolList */
  ASTExportSymbolList jjtn000 = new ASTExportSymbolList(this, JJTEXPORTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ExportSymbolList */
   try {
/*@egen*/ 
   Symbol() (<COMMA_TKN> Symbol())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Imports() : {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(this, JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Imports */
   try {
/*@egen*/ 
   <IMPORTS_TKN> [SymbolsImported()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolsImported() : {/*@bgen(jjtree) SymbolsImported */
  ASTSymbolsImported jjtn000 = new ASTSymbolsImported(this, JJTSYMBOLSIMPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsImported */
   try {
/*@egen*/ 
   SymbolsFromModuleList()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolsFromModuleList() : {/*@bgen(jjtree) SymbolsFromModuleList */
  ASTSymbolsFromModuleList jjtn000 = new ASTSymbolsFromModuleList(this, JJTSYMBOLSFROMMODULELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsFromModuleList */
   try {
/*@egen*/ 
   SymbolsFromModule() (SymbolsFromModule())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SymbolsFromModule() : {/*@bgen(jjtree) SymbolsFromModule */
                             ASTSymbolsFromModule jjtn000 = new ASTSymbolsFromModule(this, JJTSYMBOLSFROMMODULE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ String module; } 
{/*@bgen(jjtree) SymbolsFromModule */
   try {
/*@egen*/ 
   SymbolList() <FROM_TKN>  ModuleIdentifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolList() : {/*@bgen(jjtree) SymbolList */
  ASTSymbolList jjtn000 = new ASTSymbolList(this, JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolList */
   try {
/*@egen*/ 
   Symbol() (<COMMA_TKN> Symbol())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Symbol() : {/*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(this, JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Symbol */
   try {
/*@egen*/ 
   typereference()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.which = 1; }
 | identifier()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.which = 2; }
 | DefinedMacroName()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.which = 3; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AssignmentList() : {/*@bgen(jjtree) AssignmentList */
  ASTAssignmentList jjtn000 = new ASTAssignmentList(this, JJTASSIGNMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AssignmentList */
  try {
/*@egen*/ 
  Assignment() [<SEMI_COLON_TKN>] ( Assignment() [<SEMI_COLON_TKN>] )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Assignment */
   try {
/*@egen*/ 
   LOOKAHEAD(2)  MacroDefinition() |  TypeAssignment() |  ValueAssignment()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void MacroDefinition() : {/*@bgen(jjtree) MacroDefinition */
  ASTMacroDefinition jjtn000 = new ASTMacroDefinition(this, JJTMACRODEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) MacroDefinition */
   try {
/*@egen*/
   (<TC_TKN> | <OBJECTTYPE_TKN> | typereference()) <MACRO_TKN> <GETS_TKN> 
	<BEGIN_TKN>  MacroBody() <END_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

JAVACODE
void MacroBody() {/*@bgen(jjtree) MacroBody */
ASTMacroBody jjtn000 = new ASTMacroBody(this, JJTMACROBODY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/	
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == END_TKN) {
	break;	
    }
    tok = getNextToken();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void MacroReference() : {/*@bgen(jjtree) MacroReference */
  ASTMacroReference jjtn000 = new ASTMacroReference(this, JJTMACROREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MacroReference */
   try {
/*@egen*/ 
   typereference() | DefinedMacroName()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void TypeAssignment() : {/*@bgen(jjtree) TypeAssignment */
  ASTTypeAssignment jjtn000 = new ASTTypeAssignment(this, JJTTYPEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TypeAssignment */
   try {
/*@egen*/
   typereference()  <GETS_TKN>   GlobalType()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void GlobalType() : {/*@bgen(jjtree) GlobalType */
  ASTGlobalType jjtn000 = new ASTGlobalType(this, JJTGLOBALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GlobalType */
  try {
/*@egen*/
  ( 
    Type()/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.which = 1; }
   |  
    DefinedMacroType()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.which = 2; }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Type */
   try {
/*@egen*/ 
   (
     LOOKAHEAD(2) BuiltinType() { jjtn000.which = 1; }
    |  
     DefinedType() { jjtn000.which = 2; }
   )  [LOOKAHEAD(2) SubtypeSpec()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void DefinedType() : {/*@bgen(jjtree) DefinedType */
  ASTDefinedType jjtn000 = new ASTDefinedType(this, JJTDEFINEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) DefinedType */
  try {
/*@egen*/  
  [LOOKAHEAD(2) modulereference() <DOT_TKN>]  typereference()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void BuiltinType() : {/*@bgen(jjtree) BuiltinType */
  ASTBuiltinType jjtn000 = new ASTBuiltinType(this, JJTBUILTINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BuiltinType */
  try {
/*@egen*/ 
  IntegerType()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.which = 0; }
| BitStringType()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.which = 1; }
| LOOKAHEAD(2) SetOrSequenceType()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.which = 2; }
| SetOrSequenceOfType()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{ jjtn000.which = 3; }
| ChoiceType()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.which = 4; }
| SelectionType()/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.which = 5; }
| TaggedType()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.which = 6; }
| AnyType()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.which = 7; }
| EnumeratedType()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.which = 8; }
| <OCTET_TKN> <STRING_TKN>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.which = 9; }
| <OBJECT_IDENTIFIER_TKN>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{ jjtn000.which = 10; }
| <REAL_TKN>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{ jjtn000.which = 11; }
| <BOOLEAN_TKN>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{ jjtn000.which = 12; }
| <NULL_TKN>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.which = 13; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EnumeratedType() : {/*@bgen(jjtree) EnumeratedType */
  ASTEnumeratedType jjtn000 = new ASTEnumeratedType(this, JJTENUMERATEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) EnumeratedType */
   try {
/*@egen*/ 
   <ENUMERATED_TKN> <LEFTBRACE_TKN> NamedNumberList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void IntegerType() : {/*@bgen(jjtree) IntegerType */
  ASTIntegerType jjtn000 = new ASTIntegerType(this, JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) IntegerType */
 try {
/*@egen*/ 
 <INTEGER_TKN> [ <LEFTBRACE_TKN> { jjtn000.hasnames = true; } NamedNumberList() <RIGHTBRACE_TKN> ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BitStringType() : {/*@bgen(jjtree) BitStringType */
  ASTBitStringType jjtn000 = new ASTBitStringType(this, JJTBITSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BitStringType */
  try {
/*@egen*/ 
  <BIT_TKN> <STRING_TKN> [ <LEFTBRACE_TKN> { jjtn000.hasnames = true; } NamedNumberList() <RIGHTBRACE_TKN> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void NamedNumberList() : {/*@bgen(jjtree) NamedNumberList */
  ASTNamedNumberList jjtn000 = new ASTNamedNumberList(this, JJTNAMEDNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } 
{/*@bgen(jjtree) NamedNumberList */
  try {
/*@egen*/ 
  NamedNumber() (<COMMA_TKN> NamedNumber())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NamedNumber() : {/*@bgen(jjtree) NamedNumber */
  ASTNamedNumber jjtn000 = new ASTNamedNumber(this, JJTNAMEDNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) NamedNumber */
  try {
/*@egen*/ 
  identifier() <LEFTPAREN_TKN> ( SignedNumber() { jjtn000.which=1; } | DefinedValue() { jjtn000.which=2; } ) 
                            <RIGHTPAREN_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SignedNumber() : {/*@bgen(jjtree) SignedNumber */
                        ASTSignedNumber jjtn000 = new ASTSignedNumber(this, JJTSIGNEDNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) SignedNumber */
  try {
/*@egen*/ 
  [<MINUS_TKN> {jjtn000.is_neg = true; }  ] (   t = <NUMBER_TKN>/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/ { jjtn000.number = t.image; }
                                              | t = <NUMBER_ERANGE_TKN>/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/ { jjtn000.number = t.image; } )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SetOrSequenceOfType() : {/*@bgen(jjtree) SetOrSequenceOfType */
  ASTSetOrSequenceOfType jjtn000 = new ASTSetOrSequenceOfType(this, JJTSETORSEQUENCEOFTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SetOrSequenceOfType */
   try {
/*@egen*/ 
   ( <SET_TKN> { jjtn000.which = 1; } | <SEQUENCE_TKN> { jjtn000.which = 2; } ) [[<LEFTPAREN_TKN>] { jjtn000.has_size_constraint = true; } SizeConstraint() [<RIGHTPAREN_TKN>]] <OF_TKN> 
    Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SetOrSequenceType() : {/*@bgen(jjtree) SetOrSequenceType */
  ASTSetOrSequenceType jjtn000 = new ASTSetOrSequenceType(this, JJTSETORSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) SetOrSequenceType */
  try {
/*@egen*/ 
  (<SET_TKN> { jjtn000.which = 1; } | <SEQUENCE_TKN> { jjtn000.which = 2; } ) <LEFTBRACE_TKN> [ ElementTypeList() ] <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ChoiceType() : {/*@bgen(jjtree) ChoiceType */
  ASTChoiceType jjtn000 = new ASTChoiceType(this, JJTCHOICETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) ChoiceType */
   try {
/*@egen*/ 
   <CHOICE_TKN> <LEFTBRACE_TKN> ElementTypeList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ElementTypeList() : {/*@bgen(jjtree) ElementTypeList */
  ASTElementTypeList jjtn000 = new ASTElementTypeList(this, JJTELEMENTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ElementTypeList */
   try {
/*@egen*/ 
   ElementType() (<COMMA_TKN> ElementType())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ElementType() : {/*@bgen(jjtree) ElementType */
  ASTElementType jjtn000 = new ASTElementType(this, JJTELEMENTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) ElementType */
  try {
/*@egen*/ 
  ( NamedType()  [ ( <OPTIONAL_TKN> ) { jjtn000.optional = true; }
                    | 
                   ( <DEFAULT_TKN> NamedValue() ) { jjtn000.has_default = true; }
                 ] 
  )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ { jjtn000.which = 1; }
  | 
  ComponentsType()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.which = 2; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ComponentsType() : {/*@bgen(jjtree) ComponentsType */
  ASTComponentsType jjtn000 = new ASTComponentsType(this, JJTCOMPONENTSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  }
{/*@bgen(jjtree) ComponentsType */
  try {
/*@egen*/
  <COMPONENTS_TKN> <OF_TKN>  Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 

}

void NamedType() : {/*@bgen(jjtree) NamedType */
  ASTNamedType jjtn000 = new ASTNamedType(this, JJTNAMEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) NamedType */
  try {
/*@egen*/ 
  [LOOKAHEAD(2) identifier() { jjtn000.hasid = true; } ]  Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SelectionType() : {/*@bgen(jjtree) SelectionType */
  ASTSelectionType jjtn000 = new ASTSelectionType(this, JJTSELECTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SelectionType */
   try {
/*@egen*/ 
   identifier() <LESSTHAN_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void TaggedType() : {/*@bgen(jjtree) TaggedType */
  ASTTaggedType jjtn000 = new ASTTaggedType(this, JJTTAGGEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) TaggedType */
  try {
/*@egen*/ 
  Tag() [ <EXPLICIT_TKN> { jjtn000.imporexp = 0; } | <IMPLICIT_TKN>  { jjtn000.imporexp = 1; } ] Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Tag() : {/*@bgen(jjtree) Tag */
  ASTTag jjtn000 = new ASTTag(this, JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Tag */
   try {
/*@egen*/ 
   <LEFTBRACKET_TKN> [Class() { jjtn000.hasTagClass=true; } ] ClassNumber() <RIGHTBRACKET_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ClassNumber() : {/*@bgen(jjtree) ClassNumber */
  ASTClassNumber jjtn000 = new ASTClassNumber(this, JJTCLASSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ClassNumber */
   try {
/*@egen*/ 
   number()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.which=1; } | DefinedValue()/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ { jjtn000.which=2; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Class() : {/*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(this, JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Class */
   try {
/*@egen*/ 
   <UNIVERSAL_TKN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.tag_class = 0x00; } 
 | <APPLICATION_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.tag_class = 0x40; }
 | <PRIVATE_TKN>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.tag_class = 0xC0; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AnyType() : {/*@bgen(jjtree) AnyType */
  ASTAnyType jjtn000 = new ASTAnyType(this, JJTANYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AnyType */
  try {
/*@egen*/ 
  <ANY_TKN> 
  [ <DEFINED_TKN> <BY_TKN> identifier()   ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SubtypeSpec() : {/*@bgen(jjtree) SubtypeSpec */
  ASTSubtypeSpec jjtn000 = new ASTSubtypeSpec(this, JJTSUBTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeSpec */
   try {
/*@egen*/ 
   <LEFTPAREN_TKN> SubtypeValueSetList() <RIGHTPAREN_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SubtypeValueSetList() : {/*@bgen(jjtree) SubtypeValueSetList */
  ASTSubtypeValueSetList jjtn000 = new ASTSubtypeValueSetList(this, JJTSUBTYPEVALUESETLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeValueSetList */
   try {
/*@egen*/ 
   SubtypeValueSet() (<BAR_TKN> SubtypeValueSet())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SubtypeValueSet() : {/*@bgen(jjtree) SubtypeValueSet */
  ASTSubtypeValueSet jjtn000 = new ASTSubtypeValueSet(this, JJTSUBTYPEVALUESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeValueSet */
 try {
/*@egen*/ 
 (
  ValueRange() | ContainedSubtype() | PermittedAlphabet() | SizeConstraint() | InnerTypeConstraints() )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void ContainedSubtype() : {/*@bgen(jjtree) ContainedSubtype */
  ASTContainedSubtype jjtn000 = new ASTContainedSubtype(this, JJTCONTAINEDSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ContainedSubtype */
   try {
/*@egen*/ 
   <INCLUDES_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SingleValue() : {/*@bgen(jjtree) SingleValue */
  ASTSingleValue jjtn000 = new ASTSingleValue(this, JJTSINGLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SingleValue */
   try {
/*@egen*/ 
   Value()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ValueRange() : {/*@bgen(jjtree) ValueRange */
  ASTValueRange jjtn000 = new ASTValueRange(this, JJTVALUERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ValueRange */
 try {
/*@egen*/ 
 ( Value() | <MIN_TKN> ) [ [ <LESSTHAN_TKN> ]  <DOT_TKN> <DOT_TKN> [ <LESSTHAN_TKN> ] (Value() | <MAX_TKN> ) ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SizeConstraint() : {/*@bgen(jjtree) SizeConstraint */
  ASTSizeConstraint jjtn000 = new ASTSizeConstraint(this, JJTSIZECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SizeConstraint */
   try {
/*@egen*/ 
   <SIZE_TKN> SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void PermittedAlphabet() : {/*@bgen(jjtree) PermittedAlphabet */
  ASTPermittedAlphabet jjtn000 = new ASTPermittedAlphabet(this, JJTPERMITTEDALPHABET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) PermittedAlphabet */
   try {
/*@egen*/ 
   <FROM_TKN> SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void InnerTypeConstraints() : {/*@bgen(jjtree) InnerTypeConstraints */
  ASTInnerTypeConstraints jjtn000 = new ASTInnerTypeConstraints(this, JJTINNERTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) InnerTypeConstraints */
  try {
/*@egen*/ 
  <WITH_TKN> ((<COMPONENT_TKN> SingleTypeConstraint() ) | ( <COMPONENTS_TKN>  MultipleTypeConstraints()))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SingleTypeConstraint() : {/*@bgen(jjtree) SingleTypeConstraint */
  ASTSingleTypeConstraint jjtn000 = new ASTSingleTypeConstraint(this, JJTSINGLETYPECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SingleTypeConstraint */
   try {
/*@egen*/ 
   SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void MultipleTypeConstraints() : {/*@bgen(jjtree) MultipleTypeConstraints */
  ASTMultipleTypeConstraints jjtn000 = new ASTMultipleTypeConstraints(this, JJTMULTIPLETYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MultipleTypeConstraints */
  try {
/*@egen*/ 
  <LEFTBRACE_TKN> [ <DOT_TKN> <DOT_TKN> <DOT_TKN> <COMMA_TKN> ] TypeConstraints() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void TypeConstraints() : {/*@bgen(jjtree) TypeConstraints */
  ASTTypeConstraints jjtn000 = new ASTTypeConstraints(this, JJTTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeConstraints */
   try {
/*@egen*/ 
   NamedConstraint() (<COMMA_TKN> NamedConstraint())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NamedConstraint() : {/*@bgen(jjtree) NamedConstraint */
  ASTNamedConstraint jjtn000 = new ASTNamedConstraint(this, JJTNAMEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NamedConstraint */
    try {
/*@egen*/ 
    [identifier() ] Constraint()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Constraint() : {/*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(this, JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Constraint */
  try {
/*@egen*/ 
  [ValueConstraint()] [PresenceConstraint()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ValueConstraint() : {/*@bgen(jjtree) ValueConstraint */
  ASTValueConstraint jjtn000 = new ASTValueConstraint(this, JJTVALUECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ValueConstraint */
   try {
/*@egen*/ 
   SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void PresenceConstraint() : {/*@bgen(jjtree) PresenceConstraint */
  ASTPresenceConstraint jjtn000 = new ASTPresenceConstraint(this, JJTPRESENCECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) PresenceConstraint */
   try {
/*@egen*/ 
   <PRESENT_TKN> | <ABSENT_TKN> | <OPTIONAL_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}



void ValueAssignment() : {/*@bgen(jjtree) ValueAssignment */
  ASTValueAssignment jjtn000 = new ASTValueAssignment(this, JJTVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) ValueAssignment */
    try {
/*@egen*/     
    identifier() 
    GlobalType() <GETS_TKN> [ LOOKAHEAD(2) identifier() [<SELECTOR_TKN>] ] [  BuiltinValue() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
   
}

void Value() : {/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(this, JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Value */
   try {
/*@egen*/ 
   LOOKAHEAD(2) BuiltinValue() | DefinedValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void DefinedValue() : {/*@bgen(jjtree) DefinedValue */
  ASTDefinedValue jjtn000 = new ASTDefinedValue(this, JJTDEFINEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) DefinedValue */
 try {
/*@egen*/ 
 [ modulereference() <DOT_TKN> ] identifier()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BuiltinValue() : {/*@bgen(jjtree) BuiltinValue */
  ASTBuiltinValue jjtn000 = new ASTBuiltinValue(this, JJTBUILTINVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BuiltinValue */
   try {
/*@egen*/ 
   BooleanValue() 
| NullValue() 
| SpecialRealValue() 
| SignedNumber() 
| HexString() 
| BinaryString() 
| CharString() 
| CompoundValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void CompoundValue() : {/*@bgen(jjtree) CompoundValue */
  ASTCompoundValue jjtn000 = new ASTCompoundValue(this, JJTCOMPOUNDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundValue */
   try {
/*@egen*/
   <LEFTBRACE_TKN> ( ObjIdComponentList() | skip_to_matching_brace() ) <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

JAVACODE
void skip_to_matching_brace() {/*@bgen(jjtree) skip_to_matching_brace */
ASTskip_to_matching_brace jjtn000 = new ASTskip_to_matching_brace(this, JJTSKIP_TO_MATCHING_BRACE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == LEFTBRACE_TKN) nesting++;
    if (tok.kind == RIGHTBRACE_TKN) {
      nesting--;
         if (nesting == 0) break;
    }
    tok = getNextToken();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void BooleanValue() : {/*@bgen(jjtree) BooleanValue */
  ASTBooleanValue jjtn000 = new ASTBooleanValue(this, JJTBOOLEANVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BooleanValue */
   try {
/*@egen*/ 
   <TRUE_TKN> | <FALSE_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SpecialRealValue() : {/*@bgen(jjtree) SpecialRealValue */
  ASTSpecialRealValue jjtn000 = new ASTSpecialRealValue(this, JJTSPECIALREALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SpecialRealValue */
   try {
/*@egen*/ 
   <PLUS_INFINITY_TKN> | <MINUS_INFINITY_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void NullValue() : {/*@bgen(jjtree) NullValue */
  ASTNullValue jjtn000 = new ASTNullValue(this, JJTNULLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NullValue */
   try {
/*@egen*/ 
   <NULL_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void NamedValue() : {/*@bgen(jjtree) NamedValue */
  ASTNamedValue jjtn000 = new ASTNamedValue(this, JJTNAMEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NamedValue */
  try {
/*@egen*/ 
  [ LOOKAHEAD(2) identifier() ] Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ObjectIdentifierValue() : {/*@bgen(jjtree) ObjectIdentifierValue */
  ASTObjectIdentifierValue jjtn000 = new ASTObjectIdentifierValue(this, JJTOBJECTIDENTIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjectIdentifierValue */
   try {
/*@egen*/ 
   <LEFTBRACE_TKN> ObjIdComponentList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ObjIdComponentList() : {/*@bgen(jjtree) ObjIdComponentList */
  ASTObjIdComponentList jjtn000 = new ASTObjIdComponentList(this, JJTOBJIDCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjIdComponentList */
   try {
/*@egen*/ 
   ObjIdComponent() (ObjIdComponent())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ObjIdComponent() : {/*@bgen(jjtree) ObjIdComponent */
  ASTObjIdComponent jjtn000 = new ASTObjIdComponent(this, JJTOBJIDCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjIdComponent */
  try {
/*@egen*/ 
  ( NumberForm() |   NameAndNumberForm())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NumberForm() : {/*@bgen(jjtree) NumberForm */
  ASTNumberForm jjtn000 = new ASTNumberForm(this, JJTNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NumberForm */
   try {
/*@egen*/ 
   number()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}


void NameAndNumberForm() : {/*@bgen(jjtree) NameAndNumberForm */
  ASTNameAndNumberForm jjtn000 = new ASTNameAndNumberForm(this, JJTNAMEANDNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NameAndNumberForm */
  try {
/*@egen*/ 
  identifier() [<LEFTPAREN_TKN> (NumberForm() | DefinedValue()) <RIGHTPAREN_TKN>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void BinaryString() : {/*@bgen(jjtree) BinaryString */
  ASTBinaryString jjtn000 = new ASTBinaryString(this, JJTBINARYSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BinaryString */
   try {
/*@egen*/ 
   <BSTRING_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void HexString() : {/*@bgen(jjtree) HexString */
  ASTHexString jjtn000 = new ASTHexString(this, JJTHEXSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) HexString */
   try {
/*@egen*/ 
   <HSTRING_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void CharString() : {/*@bgen(jjtree) CharString */
  ASTCharString jjtn000 = new ASTCharString(this, JJTCHARSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) CharString */
   try {
/*@egen*/ 
   <CSTRING_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void number() : {/*@bgen(jjtree) number */
                  ASTnumber jjtn000 = new ASTnumber(this, JJTNUMBER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) number */
   try {
/*@egen*/ 
   t = <NUMBER_TKN>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.number = t.image; }
 | t = <NUMBER_ERANGE_TKN>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.number = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void identifier() : {/*@bgen(jjtree) identifier */
                      ASTidentifier jjtn000 = new ASTidentifier(this, JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) identifier */
   try {
/*@egen*/ 
   t = <LCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/ 
   { jjtn000.id = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void modulereference() : {/*@bgen(jjtree) modulereference */
                           ASTmodulereference jjtn000 = new ASTmodulereference(this, JJTMODULEREFERENCE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) modulereference */
   try {
/*@egen*/ 
   t = <UCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/ 
   { jjtn000.module_ref = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void typereference() : {/*@bgen(jjtree) typereference */
                         ASTtypereference jjtn000 = new ASTtypereference(this, JJTTYPEREFERENCE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) typereference */
   try {
/*@egen*/ 
   t=<UCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { jjtn000.typeref = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void DefinedMacroType() : {/*@bgen(jjtree) DefinedMacroType */
  ASTDefinedMacroType jjtn000 = new ASTDefinedMacroType(this, JJTDEFINEDMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) DefinedMacroType */
  try {
/*@egen*/ 
  TextualConventionMacroType() 
| SnmpObjectTypeMacroType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DefinedMacroName() : {/*@bgen(jjtree) DefinedMacroName */
  ASTDefinedMacroName jjtn000 = new ASTDefinedMacroName(this, JJTDEFINEDMACRONAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) DefinedMacroName */
  try {
/*@egen*/ 
  <OBJECTTYPE_TKN> 
| <TC_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SnmpObjectTypeMacroType() : {/*@bgen(jjtree) SnmpObjectTypeMacroType */
  ASTSnmpObjectTypeMacroType jjtn000 = new ASTSnmpObjectTypeMacroType(this, JJTSNMPOBJECTTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpObjectTypeMacroType */
   try {
/*@egen*/ 
   <OBJECTTYPE_TKN> <SYNTAX_TKN> Type() <ACCESS_TKN> SnmpAccess() <STATUS_TKN> SnmpStatus() [SnmpDescrPart()] [SnmpReferPart()] 
       [SnmpIndexPart()] [SnmpDefValPart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpAccess() : {/*@bgen(jjtree) SnmpAccess */
  ASTSnmpAccess jjtn000 = new ASTSnmpAccess(this, JJTSNMPACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpAccess */
   try {
/*@egen*/ 
   identifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpStatus() : {/*@bgen(jjtree) SnmpStatus */
  ASTSnmpStatus jjtn000 = new ASTSnmpStatus(this, JJTSNMPSTATUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpStatus */
  try {
/*@egen*/ 
  identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SnmpDescrPart() : {/*@bgen(jjtree) SnmpDescrPart */
  ASTSnmpDescrPart jjtn000 = new ASTSnmpDescrPart(this, JJTSNMPDESCRPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDescrPart */
   try {
/*@egen*/ 
   <DESCRIPTION_TKN> <CSTRING_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SnmpReferPart() : {/*@bgen(jjtree) SnmpReferPart */
  ASTSnmpReferPart jjtn000 = new ASTSnmpReferPart(this, JJTSNMPREFERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpReferPart */
   try {
/*@egen*/ 
   <REFERENCE_TKN> <CSTRING_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SnmpIndexPart() : {/*@bgen(jjtree) SnmpIndexPart */
  ASTSnmpIndexPart jjtn000 = new ASTSnmpIndexPart(this, JJTSNMPINDEXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpIndexPart */
   try {
/*@egen*/ 
   <INDEX_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void TypeOrValueList() : {/*@bgen(jjtree) TypeOrValueList */
  ASTTypeOrValueList jjtn000 = new ASTTypeOrValueList(this, JJTTYPEORVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeOrValueList */
  try {
/*@egen*/ 
  TypeOrValue() (<COMMA_TKN> TypeOrValue())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeOrValue() : {/*@bgen(jjtree) TypeOrValue */
  ASTTypeOrValue jjtn000 = new ASTTypeOrValue(this, JJTTYPEORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeOrValue */
  try {
/*@egen*/ 
  LOOKAHEAD(3) Type() | Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SnmpDefValPart() : {/*@bgen(jjtree) SnmpDefValPart */
  ASTSnmpDefValPart jjtn000 = new ASTSnmpDefValPart(this, JJTSNMPDEFVALPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDefValPart */
   try {
/*@egen*/ 
   <DEFVAL_TKN> <LEFTBRACE_TKN> Value() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void TextualConventionMacroType() : {/*@bgen(jjtree) TextualConventionMacroType */
  ASTTextualConventionMacroType jjtn000 = new ASTTextualConventionMacroType(this, JJTTEXTUALCONVENTIONMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TextualConventionMacroType */
   try {
/*@egen*/
   <TC_TKN> [DisplayHint()] <STATUS_TKN> SnmpStatus() [SnmpDescrPart()] [SnmpReferPart()] <SYNTAX_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void DisplayHint() : {/*@bgen(jjtree) DisplayHint */
  ASTDisplayHint jjtn000 = new ASTDisplayHint(this, JJTDISPLAYHINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DisplayHint */
  try {
/*@egen*/
  <DHINT> <CSTRING_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
