/* Generated By:JJTree&JavaCC: Do not edit this line. AsnParser.java */
//Title:       
//Version:     $Id: AsnParser.java,v 1.1.1.1 2003/07/17 17:21:37 ianibbo Exp $
//Copyright:   Copyright (C) 1999,2000 Knowledge Integration Ltd (See the file LICENSE for details.)
//Author:      Ian Ibbotson
//Company:     Knowledge Integration Ltd
//Description: 
//

package com.k_int.codec.comp;

import java.util.*;
import java.io.File;
import java.io.FileInputStream;

public class AsnParser/*@bgen(jjtree)*/implements AsnParserTreeConstants, AsnParserConstants {/*@bgen(jjtree)*/
  protected JJTAsnParserState jjtree = new JJTAsnParserState();// public static void main(String args[]) throws ParseException {

  //   System.err.println("Args :"+args);

  //   for ( int i=0; i<args.length; i++ )
  //   {
  //     System.err.println("Processing asn source file : "+args[i]);

  //     File next_asn_file = new File(args[i]);

  //     if ( next_asn_file.exists() )       
  //     {
        // parser = new AsnParser(System.in);
  //       try 
  //       {
  //         AsnParser parser = new AsnParser(new FileInputStream(next_asn_file));
  //         parser.Input();	
  //         System.out.println("ASN.1 file parsed successfully... Calling pass1");
  //         parser.jjtree.rootNode().pass1();
  //         System.out.println("Calling outputJava");
          // parser.jjtree.rootNode().outputJava();
  //         CodecBuilderInfo.getInfo().create();
  //         System.out.println("Done outputting java");
  //       }
  //       catch(ParseException e)
  //       {
  //         System.out.println(e.toString());
  //         e.printStackTrace();
  //       }
  //       catch(java.io.FileNotFoundException fnfe)
  //       {
  //         System.out.println(fnfe.toString());
  //         fnfe.printStackTrace();
  //       }
  //     }
  //   }
  // }

  public static String usefulTypes[] = {
        "GraphicString",  "NumericString", "PrintableString",
        "TeletexString", "T61String", "VideotexString", "IA5String",
        "VisibleString", "ISO646String", "GeneralizedTime", "UniversalString", "BMPString", "EXTERNAL" };

  public static String builtinTypes[] = {
        "Integer", "BitString", "SetOrSequenceType", "SetOrSequenceOfType",
        "ChoiceType", "SelectionType", "TaggedType", "Any", "Enumerated",
        "OctetString", "OID", "REAL", "BOOL", "NULL" };

  final public void Input() throws ParseException {
                /*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ModuleDefinition();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ModuleDefinition() throws ParseException {
                           /*@bgen(jjtree) ModuleDefinition */
                            ASTModuleDefinition jjtn000 = new ASTModuleDefinition(this, JJTMODULEDEFINITION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      ModuleIdentifier();
      jj_consume_token(DEFINITIONS_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLICIT_TKN:
      case EXPLICIT_TKN:
        TagDefault();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(GETS_TKN);
      jj_consume_token(BEGIN_TKN);
      ModuleBody();
      jj_consume_token(END_TKN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TagDefault() throws ParseException {
                     /*@bgen(jjtree) TagDefault */
  ASTTagDefault jjtn000 = new ASTTagDefault(this, JJTTAGDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPLICIT_TKN:
        jj_consume_token(EXPLICIT_TKN);
                     jjtn000.which = 1;
        break;
      case IMPLICIT_TKN:
        jj_consume_token(IMPLICIT_TKN);
                                                              jjtn000.which = 2;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TAGS_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ModuleIdentifier() throws ParseException {
                           /*@bgen(jjtree) ModuleIdentifier */
  ASTModuleIdentifier jjtn000 = new ASTModuleIdentifier(this, JJTMODULEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      modulereference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE_TKN:
        AssignedIdentifier();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AssignedIdentifier() throws ParseException {
                             /*@bgen(jjtree) AssignedIdentifier */
  ASTAssignedIdentifier jjtn000 = new ASTAssignedIdentifier(this, JJTASSIGNEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectIdentifierValue();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ModuleBody() throws ParseException {
                     /*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(this, JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPORTS_TKN:
        Exports();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTS_TKN:
        Imports();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECTTYPE_TKN:
      case TC_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        AssignmentList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Exports() throws ParseException {
                  /*@bgen(jjtree) Exports */
  ASTExports jjtn000 = new ASTExports(this, JJTEXPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXPORTS_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECTTYPE_TKN:
      case TC_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        SymbolsExported();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SymbolsExported() throws ParseException {
                          /*@bgen(jjtree) SymbolsExported */
  ASTSymbolsExported jjtn000 = new ASTSymbolsExported(this, JJTSYMBOLSEXPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExportSymbolList();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ExportSymbolList() throws ParseException {
                           /*@bgen(jjtree) ExportSymbolList */
  ASTExportSymbolList jjtn000 = new ASTExportSymbolList(this, JJTEXPORTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Symbol();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA_TKN);
        Symbol();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Imports() throws ParseException {
                  /*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(this, JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORTS_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECTTYPE_TKN:
      case TC_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        SymbolsImported();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsImported() throws ParseException {
                          /*@bgen(jjtree) SymbolsImported */
  ASTSymbolsImported jjtn000 = new ASTSymbolsImported(this, JJTSYMBOLSIMPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SymbolsFromModuleList();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsFromModuleList() throws ParseException {
                                /*@bgen(jjtree) SymbolsFromModuleList */
  ASTSymbolsFromModuleList jjtn000 = new ASTSymbolsFromModuleList(this, JJTSYMBOLSFROMMODULELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SymbolsFromModule();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBJECTTYPE_TKN:
        case TC_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        SymbolsFromModule();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsFromModule() throws ParseException {
                            /*@bgen(jjtree) SymbolsFromModule */
                             ASTSymbolsFromModule jjtn000 = new ASTSymbolsFromModule(this, JJTSYMBOLSFROMMODULE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);String module;
    try {
      SymbolList();
      jj_consume_token(FROM_TKN);
      ModuleIdentifier();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolList() throws ParseException {
                     /*@bgen(jjtree) SymbolList */
  ASTSymbolList jjtn000 = new ASTSymbolList(this, JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Symbol();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA_TKN);
        Symbol();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Symbol() throws ParseException {
                 /*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(this, JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:
        typereference();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.which = 1;
        break;
      case LCASEFIRST_IDENT_TKN:
        identifier();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.which = 2;
        break;
      case OBJECTTYPE_TKN:
      case TC_TKN:
        DefinedMacroName();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.which = 3;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AssignmentList() throws ParseException {
                         /*@bgen(jjtree) AssignmentList */
  ASTAssignmentList jjtn000 = new ASTAssignmentList(this, JJTASSIGNMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Assignment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI_COLON_TKN:
        jj_consume_token(SEMI_COLON_TKN);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBJECTTYPE_TKN:
        case TC_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        Assignment();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI_COLON_TKN:
          jj_consume_token(SEMI_COLON_TKN);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        MacroDefinition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:
          TypeAssignment();
          break;
        case LCASEFIRST_IDENT_TKN:
          ValueAssignment();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MacroDefinition() throws ParseException {
                          /*@bgen(jjtree) MacroDefinition */
  ASTMacroDefinition jjtn000 = new ASTMacroDefinition(this, JJTMACRODEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TC_TKN:
        jj_consume_token(TC_TKN);
        break;
      case OBJECTTYPE_TKN:
        jj_consume_token(OBJECTTYPE_TKN);
        break;
      case UCASEFIRST_IDENT_TKN:
        typereference();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MACRO_TKN);
      jj_consume_token(GETS_TKN);
      jj_consume_token(BEGIN_TKN);
      MacroBody();
      jj_consume_token(END_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  void MacroBody() throws ParseException {
                  /*@bgen(jjtree) MacroBody */
ASTMacroBody jjtn000 = new ASTMacroBody(this, JJTMACROBODY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == END_TKN) {
        break;
    }
    tok = getNextToken();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public void MacroReference() throws ParseException {
                         /*@bgen(jjtree) MacroReference */
  ASTMacroReference jjtn000 = new ASTMacroReference(this, JJTMACROREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:
        typereference();
        break;
      case OBJECTTYPE_TKN:
      case TC_TKN:
        DefinedMacroName();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeAssignment() throws ParseException {
                         /*@bgen(jjtree) TypeAssignment */
  ASTTypeAssignment jjtn000 = new ASTTypeAssignment(this, JJTTYPEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typereference();
      jj_consume_token(GETS_TKN);
      GlobalType();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void GlobalType() throws ParseException {
                     /*@bgen(jjtree) GlobalType */
  ASTGlobalType jjtn000 = new ASTGlobalType(this, JJTGLOBALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case BOOLEAN_TKN:
      case INTEGER_TKN:
      case BIT_TKN:
      case OCTET_TKN:
      case NULL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case CHOICE_TKN:
      case ANY_TKN:
      case ENUMERATED_TKN:
      case REAL_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        Type();
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.which = 1;
        break;
      case OBJECTTYPE_TKN:
      case TC_TKN:
        DefinedMacroType();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.which = 2;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        BuiltinType();
                                  jjtn000.which = 1;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:
          DefinedType();
                     jjtn000.which = 2;
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_3(2)) {
        SubtypeSpec();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DefinedType() throws ParseException {
                      /*@bgen(jjtree) DefinedType */
  ASTDefinedType jjtn000 = new ASTDefinedType(this, JJTDEFINEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        modulereference();
        jj_consume_token(DOT_TKN);
      } else {
        ;
      }
      typereference();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BuiltinType() throws ParseException {
                      /*@bgen(jjtree) BuiltinType */
  ASTBuiltinType jjtn000 = new ASTBuiltinType(this, JJTBUILTINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_TKN:
        IntegerType();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.which = 0;
        break;
      case BIT_TKN:
        BitStringType();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.which = 1;
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_5(2)) {
          SetOrSequenceType();
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     jjtn000.which = 2;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEQUENCE_TKN:
          case SET_TKN:
            SetOrSequenceOfType();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.which = 3;
            break;
          case CHOICE_TKN:
            ChoiceType();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.which = 4;
            break;
          case LCASEFIRST_IDENT_TKN:
            SelectionType();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.which = 5;
            break;
          case LEFTBRACKET_TKN:
            TaggedType();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.which = 6;
            break;
          case ANY_TKN:
            AnyType();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.which = 7;
            break;
          case ENUMERATED_TKN:
            EnumeratedType();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.which = 8;
            break;
          case OCTET_TKN:
            jj_consume_token(OCTET_TKN);
            jj_consume_token(STRING_TKN);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.which = 9;
            break;
          case OBJECT_IDENTIFIER_TKN:
            jj_consume_token(OBJECT_IDENTIFIER_TKN);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.which = 10;
            break;
          case REAL_TKN:
            jj_consume_token(REAL_TKN);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.which = 11;
            break;
          case BOOLEAN_TKN:
            jj_consume_token(BOOLEAN_TKN);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.which = 12;
            break;
          case NULL_TKN:
            jj_consume_token(NULL_TKN);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.which = 13;
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumeratedType() throws ParseException {
                         /*@bgen(jjtree) EnumeratedType */
  ASTEnumeratedType jjtn000 = new ASTEnumeratedType(this, JJTENUMERATEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENUMERATED_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      NamedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void IntegerType() throws ParseException {
                      /*@bgen(jjtree) IntegerType */
  ASTIntegerType jjtn000 = new ASTIntegerType(this, JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE_TKN:
        jj_consume_token(LEFTBRACE_TKN);
                                   jjtn000.hasnames = true;
        NamedNumberList();
        jj_consume_token(RIGHTBRACE_TKN);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void BitStringType() throws ParseException {
                        /*@bgen(jjtree) BitStringType */
  ASTBitStringType jjtn000 = new ASTBitStringType(this, JJTBITSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BIT_TKN);
      jj_consume_token(STRING_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE_TKN:
        jj_consume_token(LEFTBRACE_TKN);
                                             jjtn000.hasnames = true;
        NamedNumberList();
        jj_consume_token(RIGHTBRACE_TKN);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedNumberList() throws ParseException {
                          /*@bgen(jjtree) NamedNumberList */
  ASTNamedNumberList jjtn000 = new ASTNamedNumberList(this, JJTNAMEDNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamedNumber();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA_TKN);
        NamedNumber();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedNumber() throws ParseException {
                      /*@bgen(jjtree) NamedNumber */
  ASTNamedNumber jjtn000 = new ASTNamedNumber(this, JJTNAMEDNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LEFTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case MINUS_TKN:
        SignedNumber();
                                                  jjtn000.which=1;
        break;
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        DefinedValue();
                                                                                        jjtn000.which=2;
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RIGHTPAREN_TKN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SignedNumber() throws ParseException {
                       /*@bgen(jjtree) SignedNumber */
                        ASTSignedNumber jjtn000 = new ASTSignedNumber(this, JJTSIGNEDNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS_TKN:
        jj_consume_token(MINUS_TKN);
                jjtn000.is_neg = true;
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_TKN:
        t = jj_consume_token(NUMBER_TKN);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                   jjtn000.number = t.image;
        break;
      case NUMBER_ERANGE_TKN:
        t = jj_consume_token(NUMBER_ERANGE_TKN);
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                          jjtn000.number = t.image;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SetOrSequenceOfType() throws ParseException {
                              /*@bgen(jjtree) SetOrSequenceOfType */
  ASTSetOrSequenceOfType jjtn000 = new ASTSetOrSequenceOfType(this, JJTSETORSEQUENCEOFTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET_TKN:
        jj_consume_token(SET_TKN);
                 jjtn000.which = 1;
        break;
      case SEQUENCE_TKN:
        jj_consume_token(SEQUENCE_TKN);
                                                         jjtn000.which = 2;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN_TKN:
      case SIZE_TKN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTPAREN_TKN:
          jj_consume_token(LEFTPAREN_TKN);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
                                                                                                     jjtn000.has_size_constraint = true;
        SizeConstraint();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHTPAREN_TKN:
          jj_consume_token(RIGHTPAREN_TKN);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(OF_TKN);
      Type();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SetOrSequenceType() throws ParseException {
                            /*@bgen(jjtree) SetOrSequenceType */
  ASTSetOrSequenceType jjtn000 = new ASTSetOrSequenceType(this, JJTSETORSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET_TKN:
        jj_consume_token(SET_TKN);
               jjtn000.which = 1;
        break;
      case SEQUENCE_TKN:
        jj_consume_token(SEQUENCE_TKN);
                                                       jjtn000.which = 2;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case BOOLEAN_TKN:
      case INTEGER_TKN:
      case BIT_TKN:
      case OCTET_TKN:
      case NULL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case CHOICE_TKN:
      case ANY_TKN:
      case COMPONENTS_TKN:
      case ENUMERATED_TKN:
      case REAL_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        ElementTypeList();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ChoiceType() throws ParseException {
                     /*@bgen(jjtree) ChoiceType */
  ASTChoiceType jjtn000 = new ASTChoiceType(this, JJTCHOICETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHOICE_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      ElementTypeList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ElementTypeList() throws ParseException {
                          /*@bgen(jjtree) ElementTypeList */
  ASTElementTypeList jjtn000 = new ASTElementTypeList(this, JJTELEMENTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementType();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA_TKN);
        ElementType();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ElementType() throws ParseException {
                      /*@bgen(jjtree) ElementType */
  ASTElementType jjtn000 = new ASTElementType(this, JJTELEMENTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case BOOLEAN_TKN:
      case INTEGER_TKN:
      case BIT_TKN:
      case OCTET_TKN:
      case NULL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case CHOICE_TKN:
      case ANY_TKN:
      case ENUMERATED_TKN:
      case REAL_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        NamedType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPTIONAL_TKN:
        case DEFAULT_TKN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPTIONAL_TKN:
            jj_consume_token(OPTIONAL_TKN);
                                        jjtn000.optional = true;
            break;
          case DEFAULT_TKN:
            jj_consume_token(DEFAULT_TKN);
            NamedValue();
                                                    jjtn000.has_default = true;
            break;
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.which = 1;
        break;
      case COMPONENTS_TKN:
        ComponentsType();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.which = 2;
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ComponentsType() throws ParseException {
                         /*@bgen(jjtree) ComponentsType */
  ASTComponentsType jjtn000 = new ASTComponentsType(this, JJTCOMPONENTSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMPONENTS_TKN);
      jj_consume_token(OF_TKN);
      Type();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedType() throws ParseException {
                    /*@bgen(jjtree) NamedType */
  ASTNamedType jjtn000 = new ASTNamedType(this, JJTNAMEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        identifier();
                               jjtn000.hasid = true;
      } else {
        ;
      }
      Type();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectionType() throws ParseException {
                        /*@bgen(jjtree) SelectionType */
  ASTSelectionType jjtn000 = new ASTSelectionType(this, JJTSELECTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LESSTHAN_TKN);
      Type();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TaggedType() throws ParseException {
                     /*@bgen(jjtree) TaggedType */
  ASTTaggedType jjtn000 = new ASTTaggedType(this, JJTTAGGEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tag();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLICIT_TKN:
      case EXPLICIT_TKN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPLICIT_TKN:
          jj_consume_token(EXPLICIT_TKN);
                           jjtn000.imporexp = 0;
          break;
        case IMPLICIT_TKN:
          jj_consume_token(IMPLICIT_TKN);
                                                                       jjtn000.imporexp = 1;
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      Type();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Tag() throws ParseException {
              /*@bgen(jjtree) Tag */
  ASTTag jjtn000 = new ASTTag(this, JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACKET_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIVERSAL_TKN:
      case APPLICATION_TKN:
      case PRIVATE_TKN:
        Class();
                                jjtn000.hasTagClass=true;
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      ClassNumber();
      jj_consume_token(RIGHTBRACKET_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ClassNumber() throws ParseException {
                      /*@bgen(jjtree) ClassNumber */
  ASTClassNumber jjtn000 = new ASTClassNumber(this, JJTCLASSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
        number();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.which=1;
        break;
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        DefinedValue();
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.which=2;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Class() throws ParseException {
                /*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(this, JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIVERSAL_TKN:
        jj_consume_token(UNIVERSAL_TKN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.tag_class = 0x00;
        break;
      case APPLICATION_TKN:
        jj_consume_token(APPLICATION_TKN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.tag_class = 0x40;
        break;
      case PRIVATE_TKN:
        jj_consume_token(PRIVATE_TKN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.tag_class = 0xC0;
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AnyType() throws ParseException {
                  /*@bgen(jjtree) AnyType */
  ASTAnyType jjtn000 = new ASTAnyType(this, JJTANYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANY_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINED_TKN:
        jj_consume_token(DEFINED_TKN);
        jj_consume_token(BY_TKN);
        identifier();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SubtypeSpec() throws ParseException {
                      /*@bgen(jjtree) SubtypeSpec */
  ASTSubtypeSpec jjtn000 = new ASTSubtypeSpec(this, JJTSUBTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN_TKN);
      SubtypeValueSetList();
      jj_consume_token(RIGHTPAREN_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubtypeValueSetList() throws ParseException {
                              /*@bgen(jjtree) SubtypeValueSetList */
  ASTSubtypeValueSetList jjtn000 = new ASTSubtypeValueSetList(this, JJTSUBTYPEVALUESETLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeValueSet();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAR_TKN:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_8;
        }
        jj_consume_token(BAR_TKN);
        SubtypeValueSet();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubtypeValueSet() throws ParseException {
                          /*@bgen(jjtree) SubtypeValueSet */
  ASTSubtypeValueSet jjtn000 = new ASTSubtypeValueSet(this, JJTSUBTYPEVALUESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LEFTBRACE_TKN:
      case MINUS_TKN:
      case NULL_TKN:
      case TRUE_TKN:
      case FALSE_TKN:
      case MIN_TKN:
      case PLUS_INFINITY_TKN:
      case MINUS_INFINITY_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        ValueRange();
        break;
      case INCLUDES_TKN:
        ContainedSubtype();
        break;
      case FROM_TKN:
        PermittedAlphabet();
        break;
      case SIZE_TKN:
        SizeConstraint();
        break;
      case WITH_TKN:
        InnerTypeConstraints();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ContainedSubtype() throws ParseException {
                           /*@bgen(jjtree) ContainedSubtype */
  ASTContainedSubtype jjtn000 = new ASTContainedSubtype(this, JJTCONTAINEDSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCLUDES_TKN);
      Type();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SingleValue() throws ParseException {
                      /*@bgen(jjtree) SingleValue */
  ASTSingleValue jjtn000 = new ASTSingleValue(this, JJTSINGLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Value();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ValueRange() throws ParseException {
                     /*@bgen(jjtree) ValueRange */
  ASTValueRange jjtn000 = new ASTValueRange(this, JJTVALUERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LEFTBRACE_TKN:
      case MINUS_TKN:
      case NULL_TKN:
      case TRUE_TKN:
      case FALSE_TKN:
      case PLUS_INFINITY_TKN:
      case MINUS_INFINITY_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:
        Value();
        break;
      case MIN_TKN:
        jj_consume_token(MIN_TKN);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT_TKN:
      case LESSTHAN_TKN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHAN_TKN:
          jj_consume_token(LESSTHAN_TKN);
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHAN_TKN:
          jj_consume_token(LESSTHAN_TKN);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BSTRING_TKN:
        case HSTRING_TKN:
        case CSTRING_TKN:
        case NUMBER_ERANGE_TKN:
        case NUMBER_TKN:
        case LEFTBRACE_TKN:
        case MINUS_TKN:
        case NULL_TKN:
        case TRUE_TKN:
        case FALSE_TKN:
        case PLUS_INFINITY_TKN:
        case MINUS_INFINITY_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          Value();
          break;
        case MAX_TKN:
          jj_consume_token(MAX_TKN);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void SizeConstraint() throws ParseException {
                         /*@bgen(jjtree) SizeConstraint */
  ASTSizeConstraint jjtn000 = new ASTSizeConstraint(this, JJTSIZECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SIZE_TKN);
      SubtypeSpec();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PermittedAlphabet() throws ParseException {
                            /*@bgen(jjtree) PermittedAlphabet */
  ASTPermittedAlphabet jjtn000 = new ASTPermittedAlphabet(this, JJTPERMITTEDALPHABET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FROM_TKN);
      SubtypeSpec();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void InnerTypeConstraints() throws ParseException {
                               /*@bgen(jjtree) InnerTypeConstraints */
  ASTInnerTypeConstraints jjtn000 = new ASTInnerTypeConstraints(this, JJTINNERTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WITH_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT_TKN:
        jj_consume_token(COMPONENT_TKN);
        SingleTypeConstraint();
        break;
      case COMPONENTS_TKN:
        jj_consume_token(COMPONENTS_TKN);
        MultipleTypeConstraints();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SingleTypeConstraint() throws ParseException {
                               /*@bgen(jjtree) SingleTypeConstraint */
  ASTSingleTypeConstraint jjtn000 = new ASTSingleTypeConstraint(this, JJTSINGLETYPECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeSpec();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MultipleTypeConstraints() throws ParseException {
                                  /*@bgen(jjtree) MultipleTypeConstraints */
  ASTMultipleTypeConstraints jjtn000 = new ASTMultipleTypeConstraints(this, JJTMULTIPLETYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT_TKN:
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        jj_consume_token(COMMA_TKN);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      TypeConstraints();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeConstraints() throws ParseException {
                          /*@bgen(jjtree) TypeConstraints */
  ASTTypeConstraints jjtn000 = new ASTTypeConstraints(this, JJTTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamedConstraint();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA_TKN);
        NamedConstraint();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NamedConstraint() throws ParseException {
                          /*@bgen(jjtree) NamedConstraint */
  ASTNamedConstraint jjtn000 = new ASTNamedConstraint(this, JJTNAMEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCASEFIRST_IDENT_TKN:
        identifier();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      Constraint();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Constraint() throws ParseException {
                     /*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(this, JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN_TKN:
        ValueConstraint();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTIONAL_TKN:
      case PRESENT_TKN:
      case ABSENT_TKN:
        PresenceConstraint();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ValueConstraint() throws ParseException {
                          /*@bgen(jjtree) ValueConstraint */
  ASTValueConstraint jjtn000 = new ASTValueConstraint(this, JJTVALUECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeSpec();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PresenceConstraint() throws ParseException {
                             /*@bgen(jjtree) PresenceConstraint */
  ASTPresenceConstraint jjtn000 = new ASTPresenceConstraint(this, JJTPRESENCECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRESENT_TKN:
        jj_consume_token(PRESENT_TKN);
        break;
      case ABSENT_TKN:
        jj_consume_token(ABSENT_TKN);
        break;
      case OPTIONAL_TKN:
        jj_consume_token(OPTIONAL_TKN);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ValueAssignment() throws ParseException {
                          /*@bgen(jjtree) ValueAssignment */
  ASTValueAssignment jjtn000 = new ASTValueAssignment(this, JJTVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      GlobalType();
      jj_consume_token(GETS_TKN);
      if (jj_2_7(2)) {
        identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECTOR_TKN:
          jj_consume_token(SELECTOR_TKN);
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LEFTBRACE_TKN:
      case MINUS_TKN:
      case NULL_TKN:
      case TRUE_TKN:
      case FALSE_TKN:
      case PLUS_INFINITY_TKN:
      case MINUS_INFINITY_TKN:
        BuiltinValue();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Value() throws ParseException {
                /*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(this, JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        BuiltinValue();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          DefinedValue();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DefinedValue() throws ParseException {
                       /*@bgen(jjtree) DefinedValue */
  ASTDefinedValue jjtn000 = new ASTDefinedValue(this, JJTDEFINEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:
        modulereference();
        jj_consume_token(DOT_TKN);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      identifier();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void BuiltinValue() throws ParseException {
                       /*@bgen(jjtree) BuiltinValue */
  ASTBuiltinValue jjtn000 = new ASTBuiltinValue(this, JJTBUILTINVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE_TKN:
      case FALSE_TKN:
        BooleanValue();
        break;
      case NULL_TKN:
        NullValue();
        break;
      case PLUS_INFINITY_TKN:
      case MINUS_INFINITY_TKN:
        SpecialRealValue();
        break;
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case MINUS_TKN:
        SignedNumber();
        break;
      case HSTRING_TKN:
        HexString();
        break;
      case BSTRING_TKN:
        BinaryString();
        break;
      case CSTRING_TKN:
        CharString();
        break;
      case LEFTBRACE_TKN:
        CompoundValue();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CompoundValue() throws ParseException {
                        /*@bgen(jjtree) CompoundValue */
  ASTCompoundValue jjtn000 = new ASTCompoundValue(this, JJTCOMPOUNDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
      case LCASEFIRST_IDENT_TKN:
        ObjIdComponentList();
        break;
      default:
        jj_la1[64] = jj_gen;
        skip_to_matching_brace();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  void skip_to_matching_brace() throws ParseException {
                               /*@bgen(jjtree) skip_to_matching_brace */
ASTskip_to_matching_brace jjtn000 = new ASTskip_to_matching_brace(this, JJTSKIP_TO_MATCHING_BRACE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == LEFTBRACE_TKN) nesting++;
    if (tok.kind == RIGHTBRACE_TKN) {
      nesting--;
         if (nesting == 0) break;
    }
    tok = getNextToken();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public void BooleanValue() throws ParseException {
                       /*@bgen(jjtree) BooleanValue */
  ASTBooleanValue jjtn000 = new ASTBooleanValue(this, JJTBOOLEANVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE_TKN:
        jj_consume_token(TRUE_TKN);
        break;
      case FALSE_TKN:
        jj_consume_token(FALSE_TKN);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SpecialRealValue() throws ParseException {
                           /*@bgen(jjtree) SpecialRealValue */
  ASTSpecialRealValue jjtn000 = new ASTSpecialRealValue(this, JJTSPECIALREALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_INFINITY_TKN:
        jj_consume_token(PLUS_INFINITY_TKN);
        break;
      case MINUS_INFINITY_TKN:
        jj_consume_token(MINUS_INFINITY_TKN);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NullValue() throws ParseException {
                    /*@bgen(jjtree) NullValue */
  ASTNullValue jjtn000 = new ASTNullValue(this, JJTNULLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NamedValue() throws ParseException {
                     /*@bgen(jjtree) NamedValue */
  ASTNamedValue jjtn000 = new ASTNamedValue(this, JJTNAMEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        identifier();
      } else {
        ;
      }
      Value();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ObjectIdentifierValue() throws ParseException {
                                /*@bgen(jjtree) ObjectIdentifierValue */
  ASTObjectIdentifierValue jjtn000 = new ASTObjectIdentifierValue(this, JJTOBJECTIDENTIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      ObjIdComponentList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjIdComponentList() throws ParseException {
                             /*@bgen(jjtree) ObjIdComponentList */
  ASTObjIdComponentList jjtn000 = new ASTObjIdComponentList(this, JJTOBJIDCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjIdComponent();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_ERANGE_TKN:
        case NUMBER_TKN:
        case LCASEFIRST_IDENT_TKN:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_10;
        }
        ObjIdComponent();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjIdComponent() throws ParseException {
                         /*@bgen(jjtree) ObjIdComponent */
  ASTObjIdComponent jjtn000 = new ASTObjIdComponent(this, JJTOBJIDCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_ERANGE_TKN:
      case NUMBER_TKN:
        NumberForm();
        break;
      case LCASEFIRST_IDENT_TKN:
        NameAndNumberForm();
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumberForm() throws ParseException {
                     /*@bgen(jjtree) NumberForm */
  ASTNumberForm jjtn000 = new ASTNumberForm(this, JJTNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      number();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NameAndNumberForm() throws ParseException {
                            /*@bgen(jjtree) NameAndNumberForm */
  ASTNameAndNumberForm jjtn000 = new ASTNameAndNumberForm(this, JJTNAMEANDNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN_TKN:
        jj_consume_token(LEFTPAREN_TKN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_ERANGE_TKN:
        case NUMBER_TKN:
          NumberForm();
          break;
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          DefinedValue();
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RIGHTPAREN_TKN);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BinaryString() throws ParseException {
                       /*@bgen(jjtree) BinaryString */
  ASTBinaryString jjtn000 = new ASTBinaryString(this, JJTBINARYSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BSTRING_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void HexString() throws ParseException {
                    /*@bgen(jjtree) HexString */
  ASTHexString jjtn000 = new ASTHexString(this, JJTHEXSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HSTRING_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CharString() throws ParseException {
                     /*@bgen(jjtree) CharString */
  ASTCharString jjtn000 = new ASTCharString(this, JJTCHARSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CSTRING_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void number() throws ParseException {
                 /*@bgen(jjtree) number */
                  ASTnumber jjtn000 = new ASTnumber(this, JJTNUMBER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_TKN:
        t = jj_consume_token(NUMBER_TKN);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.number = t.image;
        break;
      case NUMBER_ERANGE_TKN:
        t = jj_consume_token(NUMBER_ERANGE_TKN);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.number = t.image;
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void identifier() throws ParseException {
                     /*@bgen(jjtree) identifier */
                      ASTidentifier jjtn000 = new ASTidentifier(this, JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LCASEFIRST_IDENT_TKN);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.id = t.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void modulereference() throws ParseException {
                          /*@bgen(jjtree) modulereference */
                           ASTmodulereference jjtn000 = new ASTmodulereference(this, JJTMODULEREFERENCE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(UCASEFIRST_IDENT_TKN);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.module_ref = t.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void typereference() throws ParseException {
                        /*@bgen(jjtree) typereference */
                         ASTtypereference jjtn000 = new ASTtypereference(this, JJTTYPEREFERENCE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(UCASEFIRST_IDENT_TKN);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.typeref = t.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DefinedMacroType() throws ParseException {
                           /*@bgen(jjtree) DefinedMacroType */
  ASTDefinedMacroType jjtn000 = new ASTDefinedMacroType(this, JJTDEFINEDMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TC_TKN:
        TextualConventionMacroType();
        break;
      case OBJECTTYPE_TKN:
        SnmpObjectTypeMacroType();
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DefinedMacroName() throws ParseException {
                           /*@bgen(jjtree) DefinedMacroName */
  ASTDefinedMacroName jjtn000 = new ASTDefinedMacroName(this, JJTDEFINEDMACRONAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECTTYPE_TKN:
        jj_consume_token(OBJECTTYPE_TKN);
        break;
      case TC_TKN:
        jj_consume_token(TC_TKN);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SnmpObjectTypeMacroType() throws ParseException {
                                  /*@bgen(jjtree) SnmpObjectTypeMacroType */
  ASTSnmpObjectTypeMacroType jjtn000 = new ASTSnmpObjectTypeMacroType(this, JJTSNMPOBJECTTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECTTYPE_TKN);
      jj_consume_token(SYNTAX_TKN);
      Type();
      jj_consume_token(ACCESS_TKN);
      SnmpAccess();
      jj_consume_token(STATUS_TKN);
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION_TKN:
        SnmpDescrPart();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REFERENCE_TKN:
        SnmpReferPart();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDEX_TKN:
        SnmpIndexPart();
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFVAL_TKN:
        SnmpDefValPart();
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpAccess() throws ParseException {
                     /*@bgen(jjtree) SnmpAccess */
  ASTSnmpAccess jjtn000 = new ASTSnmpAccess(this, JJTSNMPACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpStatus() throws ParseException {
                     /*@bgen(jjtree) SnmpStatus */
  ASTSnmpStatus jjtn000 = new ASTSnmpStatus(this, JJTSNMPSTATUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SnmpDescrPart() throws ParseException {
                        /*@bgen(jjtree) SnmpDescrPart */
  ASTSnmpDescrPart jjtn000 = new ASTSnmpDescrPart(this, JJTSNMPDESCRPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DESCRIPTION_TKN);
      jj_consume_token(CSTRING_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpReferPart() throws ParseException {
                        /*@bgen(jjtree) SnmpReferPart */
  ASTSnmpReferPart jjtn000 = new ASTSnmpReferPart(this, JJTSNMPREFERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REFERENCE_TKN);
      jj_consume_token(CSTRING_TKN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpIndexPart() throws ParseException {
                        /*@bgen(jjtree) SnmpIndexPart */
  ASTSnmpIndexPart jjtn000 = new ASTSnmpIndexPart(this, JJTSNMPINDEXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INDEX_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeOrValueList() throws ParseException {
                          /*@bgen(jjtree) TypeOrValueList */
  ASTTypeOrValueList jjtn000 = new ASTTypeOrValueList(this, JJTTYPEORVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeOrValue();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TKN:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA_TKN);
        TypeOrValue();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeOrValue() throws ParseException {
                      /*@bgen(jjtree) TypeOrValue */
  ASTTypeOrValue jjtn000 = new ASTTypeOrValue(this, JJTTYPEORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(3)) {
        Type();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BSTRING_TKN:
        case HSTRING_TKN:
        case CSTRING_TKN:
        case NUMBER_ERANGE_TKN:
        case NUMBER_TKN:
        case LEFTBRACE_TKN:
        case MINUS_TKN:
        case NULL_TKN:
        case TRUE_TKN:
        case FALSE_TKN:
        case PLUS_INFINITY_TKN:
        case MINUS_INFINITY_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:
          Value();
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SnmpDefValPart() throws ParseException {
                         /*@bgen(jjtree) SnmpDefValPart */
  ASTSnmpDefValPart jjtn000 = new ASTSnmpDefValPart(this, JJTSNMPDEFVALPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFVAL_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      Value();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TextualConventionMacroType() throws ParseException {
                                     /*@bgen(jjtree) TextualConventionMacroType */
  ASTTextualConventionMacroType jjtn000 = new ASTTextualConventionMacroType(this, JJTTEXTUALCONVENTIONMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TC_TKN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DHINT:
        DisplayHint();
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      jj_consume_token(STATUS_TKN);
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION_TKN:
        SnmpDescrPart();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REFERENCE_TKN:
        SnmpReferPart();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(SYNTAX_TKN);
      Type();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DisplayHint() throws ParseException {
                      /*@bgen(jjtree) DisplayHint */
  ASTDisplayHint jjtn000 = new ASTDisplayHint(this, JJTDISPLAYHINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DHINT);
      jj_consume_token(CSTRING_TKN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_56()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_55()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_52()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_50()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_67()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(WITH_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(MIN_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(FROM_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(SIZE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_14()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(OBJECTTYPE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_105()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(INCLUDES_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_111()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(TC_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(MACRO_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(LCASEFIRST_IDENT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(NUMBER_ERANGE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(NUMBER_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(LEFTPAREN_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(LEFTPAREN_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(CSTRING_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(DEFINED_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(BY_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ANY_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(HSTRING_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(PRIVATE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(APPLICATION_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(BSTRING_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(UNIVERSAL_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_110()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_110()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LEFTBRACKET_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_91()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RIGHTBRACKET_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_121()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(MINUS_INFINITY_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_102()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LESSTHAN_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(NUMBER_ERANGE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_87() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(NUMBER_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(COMPONENTS_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(FALSE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(NULL_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_126()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(SELECTOR_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(PLUS_INFINITY_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(TRUE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_115()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(CHOICE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_105()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_111()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RIGHTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(MINUS_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_66()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_64()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_63()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_61()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_116()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_15()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_17()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(BIT_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(STRING_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(INTEGER_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(ENUMERATED_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(NULL_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(BOOLEAN_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(REAL_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(OBJECT_IDENTIFIER_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(OCTET_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(STRING_TKN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public AsnParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[83];
  final private int[] jj_la1_0 = {0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x8000,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0xe0100100,0x0,0xc0000000,0x20100100,0x10000,0x10000,0x8000,0x803000,0x800000,0x3000,0x0,0x40000,0x80000,0x40000,0x0,0xe0100100,0x8000,0x0,0x0,0xe0100100,0x0,0x0,0x0,0x3000,0x0,0x0,0x2000000,0x813e00,0x813e00,0x400000,0x400000,0x813e00,0x404000,0x0,0x4000,0x8000,0x0,0x40000,0x0,0x0,0x8000000,0x813e00,0x0,0x0,0x813e00,0x3000,0x0,0x0,0x3000,0x3000,0x3000,0x40000,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x813e00,0x0,0x0,0x0,};
  final private int[] jj_la1_1 = {0x0,0x100040,0x100040,0x0,0x400000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12001ae,0x0,0x0,0x12001ae,0x0,0x0,0x0,0x0,0x0,0x0,0x28,0x0,0x0,0x10000000,0x28,0x12009ae,0x0,0x600,0x600,0x12009ae,0x100040,0x100040,0x7000,0x0,0x7000,0x0,0x0,0x76018004,0x4018004,0x0,0x0,0x8018004,0x0,0x80000800,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x18004,0x0,0x0,0x18004,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18004,0x0,0x0,0x0,};
  final private int[] jj_la1_2 = {0x40000,0x0,0x0,0x0,0x0,0x0,0x68040,0x68040,0x0,0x68040,0x68040,0x0,0x68040,0x0,0x68040,0x0,0x60000,0x48040,0x48040,0x68040,0x40000,0x0,0x20000,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x60000,0x0,0x4,0x0,0x60030,0x60030,0x0,0x0,0x60030,0x0,0x0,0x0,0x0,0x20000,0x0,0x3,0x3,0x0,0x30,0x60000,0x40000,0x30,0x20000,0x0,0x30,0x20000,0x20000,0x60000,0x0,0x0,0x8040,0x8040,0x400,0x800,0x1000,0x2000,0x0,0x60030,0x4000,0x400,0x800,};
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public AsnParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new AsnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AsnParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new AsnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public AsnParser(AsnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AsnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 83; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration elem_enum = jj_expentries.elements(); elem_enum.hasMoreElements();) {
        int[] oldentry = (int[])(elem_enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 83; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
